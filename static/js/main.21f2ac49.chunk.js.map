{"version":3,"sources":["styles/styles.js","service/CurrService.js","App.js","serviceWorker.js","index.js"],"names":["styled","button","_templateObject","Container","div","_templateObject2","props","width","ExchangeLabel","label","_templateObject3","ExchangeSelect","select","_templateObject4","ExchangeInput","input","_templateObject5","FlexGrid","_templateObject6","FlexGridItem","_templateObject7","direction","ExchangeValue","_templateObject8","CustomChartTooltip","_templateObject9","CurrService","Object","classCallCheck","this","url","data","Promise","resolve","then","res","historic","keys","map","item","name","moment","format","value","actual","length","oldData","console","log","newData","results","sort","a","b","id","from","to","_this","date","subtract","endDate","fetch","concat","parserConversionData","json","_this2","parserCurrenciesData","CustomTooltip","react_default","createElement","style","color","payload","Number","toFixed","App","possibleConstructorReturn","getPrototypeOf","call","currService","state","symbol","currencies","convert","setState","_this3","getCurrencie","ResponsiveContainer","height","LineChart","margin","top","right","bottom","left","Line","type","dataKey","stroke","CartesianGrid","strokeDasharray","XAxis","YAxis","domain","allowDataOverflow","Tooltip","labelStyle","itemStyle","contentStyle","borderRadius","content","App_CustomTooltip","filter","currencie","includes","currencySymbol","_this4","className","onChange","e","target","option","key","min","buildChart","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21f2ac49.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Button = styled.button`\n\tdisplay: inline-block;\n\tcolor: palevioletred;\n\tfont-size: 1em;\n\tmargin: 1em;\n\tpadding: 0.25em 1em;\n\tborder: 2px solid palevioletred;\n\tborder-radius: 3px;\n`;\n\nexport const Container = styled.div`\n\tdisplay: block;\n\twidth: ${ props => props.width ? props.width : '100%' };\n\tmax-width: 100%;\n\tmargin: 0 auto;\n\tbox-sizing: border-box;\n\n\t@media (max-width: 700px) {\n    padding: 0 15px;\n  }\n`\n\n\nexport const ExchangeLabel = styled.label`\n\tcolor: #FFF;\n\tmargin-bottom: 10px;\n\t`\n\nexport const ExchangeSelect = styled.select`\n\twidth: 100%;\n\theight: 50px;\n\tborder: 1px solid #5afac3;\n\tbackground: transparent;\n\tpadding: 0 15px;\n\tborder-radius: 3px;\n\tcolor: #FFF;\n\t\n\t&:focus {\n\t\toutline: none;\n\t}\n`\n\nexport const ExchangeInput = styled.input`\n\twidth: 100%;\n\theight: 50px;\n\tborder: 1px solid #5afac3;\n\tbackground: transparent;\n\tpadding: 0 15px;\n\tborder-radius: 3px;\n\tcolor: #FFF;\n\t\n\t&:focus {\n\t\toutline: none;\n\t}\n`\n\nexport const FlexGrid = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\n\t@media (max-width: 700px) {\n    flex-direction: column;\n  }\n`\n\nexport const FlexGridItem = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n\tpadding: 0 5px;\n\tmargin-bottom: 10px;\n\tflex-direction: ${ props => props.direction ? props.direction : 'row' };\n\tbox-sizing: border-box;\n`\n\nexport const ExchangeValue = styled.div`\n\tcolor: #5afac3;\n\twidth: 100%;\n\tpadding: 25px 15px;\n\ttext-align: center;\n\tfont-size: 30px;\n`\n\nexport const CustomChartTooltip = styled.div`\n\tbackground-color: #FFF;\n\tborder-radius: 2px;\n\tpadding: 15px;\n`","import moment from 'moment';\n\nclass CurrService {\n\n    constructor(){\n\n        this.url = `https://free.currencyconverterapi.com/api/v6`;\n    }\n\n    parserConversionData(data) {\n        \n        return new Promise((resolve) => {\n            \n            data.then(res => {\n\n                const inData = Object.keys(res[Object.keys(res)[0]]);\n\n                const historic = inData.map(item => {\n                    return {\n                        name: moment(item).format('DD/MM'), \n                        value: res[Object.keys(res)[0]][item]\n                    };\n                });\n                const actual = historic[(historic.length - 1)];\n\n                let newData = {\n                    historic,\n                    actual\n                }\n    \n                resolve(newData);\n            });\n        });\n    }\n\n    parserCurrenciesData( oldData ) {\n\n        console.log(oldData)\n\n        return new Promise((resolve) => oldData.then(data => { \n\n            let newData = Object.keys(data.results).map(item => data.results[item]);\n\n            newData.sort((a,b) => (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0));\n\n            resolve(newData);        \n        }));\n    }\n    \n    convert(from, to) {\n\n        const date = moment().subtract(8,'days').format('YYYY-MM-DD');\n        const endDate = moment().format('YYYY-MM-DD');\n\n        return fetch(`${ this.url }/convert?q=${ from }_${ to }&compact=ultra&date=${ date }&endDate=${ endDate }`).then(data => this.parserConversionData(data.json()))\n    }\n\n    currencies() {\n        \n        return fetch(`${ this.url }/currencies`).then(data => this.parserCurrenciesData( data.json() ));\n    }\n}\n\nexport default CurrService;","import React, { Component } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { Button, Container, ExchangeInput, FlexGrid, FlexGridItem, ExchangeSelect, ExchangeLabel, ExchangeValue, CustomChartTooltip } from './styles/styles';\n\nimport CurrService from \"./service/CurrService\";\n\nconst CustomTooltip = props => {\n\n  return (\n    <CustomChartTooltip>\n      <div style={ {color: '#272a2d'} }>{ props.payload.length ? Number(props.payload[0].value).toFixed(2) : 0 }</div>\n    </CustomChartTooltip>\n  )\n}\n\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.currService = new CurrService();\n    this.state = {\n      data: null,\n      to: 'BRL',\n      from: 'USD',\n      value: 1,\n      symbol: '',\n      currencies: []\n    };\n  }\n\n  componentDidMount() {\n\n    this.currService\n    .currencies()\n    .then(currencies => {\n      \n      this.convert(this.state.to,this.state.from);\n      this.setState({ currencies })\n    });\n  }\n\n  convert(to,from) {\n\n    this.currService\n    .convert(from,to)\n    .then(data => {\n      this.setState({ \n        data: data,\n        symbol: this.getCurrencie( this.state.to ) \n      });\n    });\n  }\n\n  buildChart() {\n\n    if( !this.state.data ) return;\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart data={this.state.data.historic} margin={ { top: 0, right: 50, bottom: 5, left: 0 } }>\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#5afac3\" />\n          <CartesianGrid stroke=\"#272a2d\" strokeDasharray=\"1 1\" />\n          <XAxis dataKey=\"name\"/>\n          <YAxis dataKey=\"value\" domain={[0, 'auto']} allowDataOverflow={ true } />\n          <Tooltip labelStyle={ {color: '#06090d'} } itemStyle={ {color: 'red'} } contentStyle={ {borderRadius: '2px'}} content={ <CustomTooltip /> }/>\n        </LineChart>\n      </ResponsiveContainer>\n    )\n  }\n\n  getCurrencie( id ) {\n\n    const data = this.state.currencies.filter(currencie => currencie.id === id)[0];\n\n    return Object.keys(data).includes('currencySymbol') ? data.currencySymbol : '';\n  }\n  \n  render() {\n    return (\n      <main className=\"content\">\n        <Container width={ '900px' }>\n          <FlexGrid>\n            <FlexGridItem direction={ 'column' }>\n              <ExchangeLabel>From:</ExchangeLabel>\n              <ExchangeSelect onChange={(e) => this.setState({to: e.target.value}, () => this.convert(this.state.to, this.state.from))} value={ this.state.to }>\n                { this.state.currencies.map(option => <option value={ option.id } key={ option.id }>{ option.id }</option>) }\n              </ExchangeSelect>\n            </FlexGridItem>\n            <FlexGridItem direction={ 'column' }>\n              <ExchangeLabel>To:</ExchangeLabel>\n              <ExchangeSelect onChange={(e) => this.setState({from: e.target.value}, () => this.convert(this.state.to, this.state.from))} value={ this.state.from }>\n                { this.state.currencies.map(option => <option value={ option.id } key={ option.id }>{ option.id }</option>) }\n              </ExchangeSelect>\n            </FlexGridItem>\n            <FlexGridItem direction={ 'column' }>\n              <ExchangeLabel>Value:</ExchangeLabel>\n              <ExchangeInput min={ 1 } type={ 'number' } value={ this.state.value } onChange={e => this.setState({value: e.target.value})}/>\n            </FlexGridItem>\n          </FlexGrid>\n          <FlexGrid>\n            <FlexGridItem>\n              <ExchangeValue>{ this.state.data ? ` ${ this.state.symbol } ${ Number(this.state.data.actual.value * this.state.value ).toFixed(2) }` : '0.00' }</ExchangeValue>\n            </FlexGridItem>\n          </FlexGrid>\n          { this.buildChart() }\n        </Container>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}